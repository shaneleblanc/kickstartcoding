As before, do one challenge at a time, and raise your hand if/when you
get stuck!


-------------------
Challenge 1:

1. As before, get the site running. Note how you cannot access the feed
unless logged in.

2. Run python manage.py migrate to run the initial migrations.

3. Create a new Django Superuser (administrator account). Remember the
name / password you used. Clue:

    python manage.py createsuperuser

4. Once logged via the admin interface, confirm that you can see the
"feed" view.


-------------------
Challenge 2:

Time to actually make the wall posts functional, and saving in the
database!  The syntax and structure is very similar to making a Form.
Examine the following clue:

    class ExampleModel(models.Model):
        single_line_field = models.CharField(max_length=30)
        multiple_line_field = models.TextField()

Using some modification of this example create a new model called
"WallPost" in wall/models.py.  Make sure the name of your two fields are
the same as the dictionary ("username" and "text" respectively).



-------------------
Challenge 3:

Run the following command to create the "migration" necessary to update
your database to include your new model:

    python manage.py makemigrations

Observe how it creates a migration titled something like "Create model
WallPost"?  Finally, re-run the "migrate" command to actually run this
"migration", getting your database updated to the new model:

    python manage.py migrate



-------------------
Challenge 4:

Change the feed view to get the posts from the database instead of from
the list. A clue:

    from .models import WallPost
    posts = WallPost.objects.all()



-------------------
Challenge 5:

Change the feed view to save posts to the database instead of the list.

    WallPost.objects.create(
        username='example_user',
        text='example text',
    )




-------------------

Bonus Challenge 1:

Fix the search view to use WallPost objects instead of the posts list.
Replace "all" with filter.  Check out the following clue:

    WallPost.objects.filter(
        text__icontains="example search",
    )



Bonus Challenge 2:

Can you follow the Django admin documentation to make it so that you can
add and edit posts in the database?
https://docs.djangoproject.com/en/2.0/intro/tutorial02/#make-the-poll-app-modifiable-in-the-admin


Bonus Challenge 3:

Try adding a special __str__ method to the WallPost so it looks better
in the administrator interface, as such:

    def __str__(self):
        return '%s: %s' % (
            self.username,
            self.text,
        )


-------------------
Advanced Challenge:

We'll get into ForeignKeys later, but this is a nice chance to use it
early. Can you replace "username" with a "user" field that is a
ForeignKey to the User model?
https://docs.djangoproject.com/en/2.0/ref/models/fields/#foreignkey

Once completed, can you create a user page that shows the posts for a
given user?


(not completed in the solution, since conflicts with previous solutions)

